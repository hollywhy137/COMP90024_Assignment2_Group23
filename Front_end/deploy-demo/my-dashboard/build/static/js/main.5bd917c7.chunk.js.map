{"version":3,"sources":["charts/Doughnut.js","charts/BarChart.js","charts/MixChart.js","googleMap/Map.js","App.js","reportWebVitals.js","index.js"],"names":["DoughnutChart","props","chartRef","React","createRef","this","myChart","data","labels","label","datasets","value","update","Chart","current","type","backgroundColor","colors","options","maintainAspectRatio","responsive","ref","Component","BarChart","borderColor","borderWidth","scales","y","suggestedMax","suggestedMin","plugins","title","display","text","fontSize","legend","position","MixChart","Doughnut","App","useState","setType","setStreaming","startStream","console","log","stopStream","path","className","onClick","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bd917c7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Chart } from \"react-chartjs-2\";\n\nclass DoughnutChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.myChart.data.labels = this.props.label;\n    this.myChart.data.datasets[0].data = this.props.value;\n    this.myChart.update();\n  }\n\n  componentDidMount() {\n    this.myChart = new Chart(this.chartRef.current, {\n      type: \"doughnut\",\n      data: {\n        labels: this.props.label,\n        datasets: [\n          {\n            data: this.props.value,\n            backgroundColor: this.props.colors,\n          },\n        ],\n      },\n      options: {\n        maintainAspectRatio: false,\n        responsive: true,\n      },\n    });\n  }\n\n  render() {\n    return <canvas ref={this.chartRef} />;\n  }\n}\n\nexport default DoughnutChart;\n","import React from \"react\";\nimport { Chart } from \"react-chartjs-2\";\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.myChart.data.labels = this.props.label;\n    this.myChart.data.datasets[0].data = this.props.value;\n    this.myChart.update();\n  }\n\n  componentDidMount() {\n    this.myChart = new Chart(this.chartRef.current, {\n      type: \"bar\",\n      data: {\n        labels: this.props.label,\n        datasets: [\n          {\n            label: \"Rain fall\",\n            backgroundColor: \"rgba(75,192,192,1)\",\n            borderColor: \"rgba(0,0,0,1)\",\n            borderWidth: 2,\n            data: this.props.value,\n          },\n        ],\n      },\n      options: {\n        maintainAspectRatio: false,\n        responsive: true,\n        scales: {\n          y: {\n            suggestedMax: 120,\n            suggestedMin: 0,\n          },\n        },\n        plugins: {\n          title: {\n            display: true,\n            text: \"Average Rainfall per month\",\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: \"top\",\n          },\n        },\n      },\n    });\n  }\n\n  render() {\n    return <canvas ref={this.chartRef} />;\n  }\n}\n\nexport default BarChart;\n","import Doughnut from \"./Doughnut\";\nimport BarChart from \"./BarChart\";\n\nconst MixChart = ({ type, label, value }) => {\n  if (type === \"bar\") {\n    return <BarChart label={label} value={value} />;\n  } else {\n    return (\n      <Doughnut\n        label={label}\n        value={value}\n        colors={[\n          \"#a8e0ff\",\n          \"#8ee3f5\",\n          \"#70cad1\",\n          \"#3e517a\",\n          \"#b08ea2\",\n          \"#BBB6DF\",\n        ]}\n      />\n    );\n  }\n};\n\nexport default MixChart;\n","import React from \"react\";\nimport { GoogleMap, useJsApiLoader } from \"@react-google-maps/api\";\n\nconst containerStyle = {\n  width: \"585px\",\n  height: \"285px\",\n};\n\nconst center = {\n  lat: -37.840935,\n  lng: 144.946457,\n};\n\nfunction MyComponent() {\n  const { isLoaded } = useJsApiLoader({\n    id: \"google-map-script\",\n    googleMapsApiKey: \"AIzaSyAH6tVo1CB6WY_Ge6rQWbzhTfzbLF0ad0U\",\n  });\n\n  const [map, setMap] = React.useState(null);\n\n  const onLoad = React.useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds();\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n\n  return isLoaded ? (\n    <GoogleMap\n      mapContainerStyle={containerStyle}\n      center={center}\n      zoom={12}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n    >\n      {/* Child components, such as markers, info windows, etc.\n      <></> */}\n    </GoogleMap>\n  ) : (\n    <></>\n  );\n}\n\nexport default React.memo(MyComponent);\n","import { useState, useEffect } from \"react\";\nimport MixChart from \"./charts/MixChart\";\nimport Map from \"./googleMap/Map\";\nimport { Route, BrowserRouter as Router, Switch, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [type, setType] = useState(\"bar\");\n  const [value, setValue] = useState([20, 30, 40, 50, 60]);\n  const label = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"];\n  const [streaming, setStreaming] = useState(true);\n\n  function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  // useEffect(() => {\n  //   async function getData() {\n  //     if (streaming) {\n  //       await sleep(1000);\n  //       await fetchData();\n  //     }\n  //   }\n  //   getData();\n  // }, [streaming, value]);\n\n  const fetchData = async () => {\n    let val = [];\n\n    await fetch(\"http://localhost:5984/rain1/_design/month/_view/id\", {\n      method: \"get\",\n      headers: new Headers({\n        Authorization: \"Basic \" + btoa(\"admin:admin\"),\n      }),\n    })\n      .then((response) => response.json())\n      .catch((err) => console.error(err))\n      .then((data) => {\n        for (const dataObj of data[\"rows\"]) {\n          val.push(dataObj[\"value\"]);\n        }\n      });\n    setValue(val);\n  };\n\n  const startStream = () => {\n    setStreaming(true);\n    console.log(\"Streaming now\");\n  };\n\n  const stopStream = () => {\n    setStreaming(false);\n    console.log(\"Streaming closed\");\n  };\n\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path=\"/about\">\n            <div className=\"grid-container\">\n              <div className=\"header\"></div>\n              <div className=\"navigator\">\n                <button onClick={startStream} className=\"button\">\n                  Start Streaming\n                </button>\n                <button onClick={stopStream} className=\"button\">\n                  Stop Streaming\n                </button>\n                <Link to=\"/about\" className=\"button\">\n                  About\n                </Link>\n                <Link to=\"/\" className=\"button\">\n                  Home\n                </Link>\n              </div>\n              <div className=\"chart\">COMP90024 CCC Assignment2</div>\n            </div>\n          </Route>\n          <Route path=\"/\">\n            <div className=\"grid-container\">\n              <div className=\"header\"></div>\n              <div className=\"navigator\">\n                <button onClick={startStream} className=\"button\">\n                  Start Streaming\n                </button>\n                <button onClick={stopStream} className=\"button\">\n                  Stop Streaming\n                </button>\n                <Link to=\"/about\" className=\"button\">\n                  About\n                </Link>\n              </div>\n              <div className=\"chart\">\n                <MixChart type={type} label={label} value={value} />\n                <button onClick={() => setType(\"bar\")} className=\"myButton\">\n                  Bar Chart\n                </button>\n                <button\n                  onClick={() => setType(\"doughnut\")}\n                  className=\"myButton\"\n                >\n                  Doughnut Chart\n                </button>\n              </div>\n              <div className=\"map\">{/* <Map /> */}</div>\n            </div>\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}